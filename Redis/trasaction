主从、事务

同步原理：
	     从服务器会向主服务器发出SYNC指令，当主服务器接到此命令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中。
	     在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。
	     另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个下游。在redis2.8版本之前，如果从服务器与主服务器因某些原因断开连接的话，都会进行一次主从之间的全量的数据同步；而在2.8版本之后，redis支持了效率更高的增量同步策略，这大大降低了连接断开的恢复成本。
	     主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，从服务器就会把“希望同步的主服务器ID”和“希望请求的数据的偏移位置（replication offset）”发送出去。主服务器接收到这样的同步请求后，首先会验证主服务器ID是否和自己的ID匹配，其次会检查“请求的偏移位置”是否存在于自己的缓冲区中，如果两者都满足的话，主服务器就会向从服务器发送增量内容。
	     增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。
	
	redis中通过配置文件slaveof <masterip> <masterport>来控制某一个redis作为另一个redis的从服务器。如果主redis设置了验证密码(requiredpass来设置)，则在从redis中使用masterauth来设置校验密码。masterauth <master-password>

事务处理：
	redis的事务有四个指令：
		1.MULTI用来组装一个事务；
		2.EXEC用来执行一个事务；
		3.DISCARD用来取消一个事务；
		4.WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行
		
		MULTI的输入代表事务的开始，之后进行一系列命令，EXEC开始执行那些命令。
			exec之前错误，redis2.6.5之后版本会拒绝执行，之前版本会执行成功的命令。之后的错误，比如单个命令存入缓存是正确的，但是在exec后会进行命令的执行，多个命令一起执行时，错误，那么redis不会理睬这些错误，直接执行正确的命令。
		WATCH指令可以帮我们实现类似于“乐观锁”的效果。监视时，如果key被修改了，在执行exec的时候就会返回nil，表示事务无法触发。


配置文件的相关配置信息太多，直接查看地址： https://blog.csdn.net/liqingtx/article/details/60330555
