一、定义AOP术语
	通知(Advice)：定义切面是什么以及何时使用。
	连接点(Join Point)：应用执行中能够插入切面的一个点，这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。
	切点(Pointcut)：匹配通知所要织入的一个或多个链接点。
	切面(Aspect)：通知和切点的结合。
	引入(Introduction)：引入允许我们向现有的类添加新方法或属性。在无需修改这些现有的类的情况下，让他们具有新的行为和状态。
	织入(Weaving)：把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：(编译期、例如AspectJ，类加载期，运行期、例如SpringAOP)
	
	编写切点：
	在方法执行时触发    返回任意类型    方法所属的类            方法    使用任意参数
	execution        (      *        concert.Performance. Perform      (..)    )
				           |---------------------------------指定方法-----------------|
				
二、使用注解创建切面
	一个类使用@Aspect注解进行了标注，该注解表明该类不仅仅是一个POJO，还是一个切面。里面的方法都使用注解来定义切面的具体行为。
	@Pointcut注解能够在一个切面内定义可以重用的切点：单独定义一个空方法，上面打上注解@Pointcout("execution(完全限定名方法)")，再在其他的方法上注解的值引用该方法
	需要注意的是，除了注解和没有实际操作的pointcut注解的方法，该切面依然是一个POJO，我们能够像使用其他Java类那样调用它的方法。
	如果想在Spring中装配为bean，在类上面注解@Bean，但是需要专门进行操作才能将类视为切面：
		使用JavaConfig：
			可以在配置类config的类级别上通过使用@EnableAspectJAutoProxy注解启用自动代理功能。
		使用XML：
			使用aop命名空间中的<aop:aspectj-autoproxy/>元素
	创建环绕通知：
		环绕通知的方法接受ProceedingJoinPoint作为参数，这个对象是必须要有的，因为在通知中通过它来调用被通知的方法，先写了前置通知，该对象调用proceed方法(将控制权交给被通知的方法时)，再写后置通知，try-catch时写抛异常时的通知。
