log4j2.xml

缺省默认配置文件：

 <?xml version="1.0" encoding="UTF-8"?>
 <Configuration status="WARN">
   <Appenders>
     <Console name="Console" target="SYSTEM_OUT">
       <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
     </Console>
   </Appenders>
   <Loggers>
     <Root level="error">
      <AppenderRef ref="Console"/>
    </Root>
  </Loggers>
 </Configuration>


节点分析:
	1. 根节点Configuration有两个属性：status和monitorinterval，有两个子节点：Appenders和Loggers(表明可以定义多个Appender和Logger)。
	status用来指定log4j本身的打印日志的级别
	monitorinterval用于指定log4j自动重新配置的检查间隔时间，单位是s，最小是5s
	2. Appenders节点，常见的有三种子节点：Console、RollingFile、File
		a. Console节点用来定义输出到控制台的Appender
		name：指定Appender的名字
		target：SYSTEM_OUT或者SYSTEM_ERR，一般只设置默认out
		PatternLayout：输出格式，不设置默认为：%m%n
		
		b. File节点用来定义输出到指定位置的文件的Appender
		name：
		fileName：指定输出日志的目的文件带全路径的文件名
		PatterLayout
		
		c. RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender
		name：
		fileName
		PatternLayout
		filePattern：指定新建日志文件的名称格式
		Policies：指定滚动日志的策略，就是什么时候进行新建日志文件输出日志
		TimeBasedTriggeringPolicy：Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动式在4am，接着是4am、8、12而不是7am
		SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
		DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
	3. Loggers节点，常见的有两种：Root和Logger
		a. Root节点用来指定项目的根日志，如果没有单独指定Logger，默认使用该Root日志输出
		level：日志输出级别：All<Trace<Debug<Info<Warn<Error<Fatal<OFF
		AppenderRef:Root的子节点，用来指定该日志输出到哪个Appender
		b. Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等
		level：
		name：用来指定该Logger所适用的类或者类所在的包全路径，继承自Root节点
		AppenderRef：Logger的子节点，如果没有指定，就会默认继承自Root，如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
	
