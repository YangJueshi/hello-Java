Flyway

1. 介绍
https://blog.csdn.net/u014091123/article/details/78133522                                     https://blog.csdn.net/chenleiking/article/details/80691750                                  https://flywaydb.org/documentation/migrations
 
2. 在spring boot 中的应用（demo：\\10.248.36.121\安装包\flyway）
1）添加以下依赖：
1. <dependency>  
2.     <groupId>org.flywaydb</groupId>  
3.     <artifactId>flyway-core</artifactId>  
4. </dependency>  
2）flyway配置示例：（官网：https://flywaydb.org/documentation/configfiles）
## 设定 db source 属性  
1. spring.datasource.url=jdbc:mysql://localhost:3306/world  
2. spring.datasource.username=root  
3. spring.datasource.password=toor  
  
## 设定 flyway 属性   
# flyway 的 clean 命令会删除指定 schema 下的所有 table, 杀伤力太大了, 应该禁掉.   
4. spring.flyway.cleanDisabled=true  
# 启用或禁用 flyway   
5. spring.flyway.enabled=true  
# 设定 SQL 脚本的目录,多个路径使用逗号分隔, 比如取值为 classpath:db/migration,filesystem:/sql-migrations  
6. spring.flyway.locations=classpath:db/migration  
# 如果指定 schema 包含了其他表,但没有 flyway schema history 表的话, 在执行 flyway migrate 命令之前, 必须先执行 flyway baseline 命令.  
# 设置 spring.flyway.baseline-on-migrate 为 true 后, flyway 将在需要 baseline 的时候, 自动执行一次 baseline.   
7. spring.flyway.baselineOnMigrate=true  
# 指定 baseline 的版本号,缺省值为 1, 低于该版本号的 SQL 文件, migrate 的时候被忽略.   
8. spring.flyway.baselineVersion=1   
# Encoding of SQL migrations (default: UTF-8)  
9. spring.flyway.encoding=UTF-8  
# 设定 flyway 的 metadata 表名, 缺省为 flyway_schema_history  
10. spring.flyway.table=flyway_schema_history  
# 脚本是否按顺序执行，开发环境最好开启 outOfOrder, 生产环境关闭 outOfOrder .  
11. spring.flyway.outOfOrder=true  
# 需要 flyway 管控的 schema list, 缺省的话, 使用的时 dbsource.connection直连上的那个 schema,   
#可以指定多个schema, 但仅会在第一个schema下建立 metadata 表, 也仅在第一个schema应用migration sql 脚本. 但flyway Clean 命令会依次在这些schema下都执行一遍.  
12. spring.flyway.schemas=
      3）demo的flayway配置
1. spring:  
2.   jackson:  
3.     serialization:  
4.       write-dates-as-timestamps: true  
5.     time-zone: GMT+8  
6.   datasource:  
7.     password: 12345678  
8.     driver-class-name: com.mysql.cj.jdbc.Driver  
9.     url: jdbc:mysql://localhost:3306/test  
10.     username: root  
11.   flyway:  
12.     locations: filesystem:./config/db,classpath:com/msl/migration  
#    baselineOnMigrate: true  
#    baselineVersion: 1  
13.     cleanDisabled: true  
4） 基于sql的migration如以下下图所示

5）基于Java的migration如以下下图所示

6）回调（https://flywaydb.org/documentation/api/hooks#callsbacks）

3. 总结：
1）优势：（https://flywaydb.org/）
1. 既支持SQL 脚本，又支持Java 代码：可以使用SQL 脚本执行数据库更新，也可以使用Java 代码来进行一些高级数据升级操作；
2. 支持命令行方式执行
3. 与Spring 框结合，很方便地实现应用启动时自动检查并升级数据库的功能
4. 自动升级：Flyway 会根据当前数据库状态升级到最新版本。
5. 规约优于配置：Flyway 定义了一套默认的规约，不需要修改任何配置就可以正常使用。
6. 跨平台：Windows, Mac OSX, Linux, Java 和 Android
7. 兼容多种数据库：Oracle, SQL Server, SQL Azure, DB2, DB2 z/OS, MySQL, MariaDB, Google Cloud SQL, PostgreSQL, Redshift, Greenplum, Vertica, EnterpriseDB, H2, Hsql, Derby, SQLite
8. 高可靠性：在集群环境下进行数据库升级是安全可靠的。
9. 支持失败修复：提供了Repair 功能，用于解决数据库更新操作失败问题。
2） 缺点
由于SQL文件不具有通用性，依赖于特定的数据库，所以需要编写特定数据库引擎的正确语法，无法适用于多个数据库。
